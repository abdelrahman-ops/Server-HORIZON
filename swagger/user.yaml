paths:
  /user/register:
    post:
      tags: [Users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
            example:
              name: "Jane Doe"
              title: "Developer"
              role: "developer"
              email: "jane@example.com"
              password: "password123"
              isAdmin: false
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/login:
    post:
      tags: [Users]
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            example:
              email: "jane@example.com"
              password: "password123"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/profile:
    get:
      tags: [Users]
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized

components:
  schemas:
    User:
      type: object
      required: [name, title, role, email, password]
      properties:
        id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        name:
          type: string
          example: "John Doe"
        title:
          type: string
          example: "Project Manager"
        role:
          type: string
          enum: ["manager", "developer", "designer", "qa"]
          example: "manager"
        email:
          type: string
          format: email
          example: "john@example.com"
        isAdmin:
          type: boolean
          default: false
        isActive:
          type: boolean
          default: true
        tasks:
          type: array
          items:
            type: string
            format: uuid
          example: ["60d21b4667d0d8992e610c86"]
        createdAt:
          type: string
          format: date-time
          example: "2023-07-20T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-07-20T12:00:00Z"

    UserRegister:
      type: object
      required: [name, title, role, email, password]
      properties:
        name:
          type: string
        title:
          type: string
        role:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        isAdmin:
          type: boolean
          default: false

    UserLogin:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."